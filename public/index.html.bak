<!doctype html>
<html lang="es">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Solana Million Grid - Demo</title>
  <style>
    body { background:#111; color:#fff; font-family:Arial, sans-serif; margin:0; }
    header { background:#222; padding:10px; color:gold; display:flex; justify-content:space-between; align-items:center; }
    .connectBtn { padding:6px 10px; background:#28a745; border:none; border-radius:6px; color:#fff; cursor:pointer; }
    #info { padding:10px; background:#333; text-align:center; }
    #gridWrapper { display:flex; justify-content:center; padding:18px; }
    #gridContainer { position:relative; display:inline-block; border:2px solid #444; }
    #canvas { display:block; cursor:crosshair; image-rendering:pixelated; background:#555; }
    #selectionOverlay { position:absolute; pointer-events:none; display:none; z-index:20; background:rgba(0,255,255,0.04); }
    #tooltip { position:absolute; display:none; pointer-events:none; background:rgba(0,0,0,0.9); color:#fff; padding:6px 8px; border-radius:6px; border:1px solid gold; z-index:60; font-size:13px; white-space:nowrap; }
    #buttons { text-align:center; margin:10px; }
    button { padding:8px 12px; border-radius:6px; border:none; cursor:pointer; font-weight:bold; }
    .price-display { color:gold; text-align:center; padding:8px; margin-bottom:8px; background:#111; border-radius:6px; }
    .sold-overlay { position:absolute; pointer-events:none; background: rgba(0,0,0,0.25); border:1px dashed rgba(255,215,0,0.3); z-index:30; box-sizing:border-box; }
    #paymentStatus { text-align:center; padding:8px; margin-top:8px; color:#fff; }
    input[type="text"], input[type="file"] { width:100%; padding:8px; background:#333; border:1px solid #555; color:#fff; border-radius:6px; margin-top:6px; box-sizing:border-box; }
    #modalInner { background:#222; padding:22px; border-radius:8px; border:2px solid gold; width:360px; max-width:90%; margin:auto; }
  </style>
</head>
<body>
  <header>
    <div>Solana Million Grid</div>
    <div>
      <button id="connectWallet" class="connectBtn">Conectar Wallet</button>
      <span id="walletAddr" style="margin-left:8px;color:#ddd;font-size:13px"></span>
    </div>
  </header>

  <div id="info">
    Píxeles ocupados: <span id="sold">0</span> / 1,000,000 |
    Precio: 0.01 SOL por bloque 10x10 |
    Wallet: <span id="merchantWallet">CEBiKkD8q6F28byTb9iVqPUiojv9n5bHEW5wEJJpVAQE</span>
  </div>

  <div id="selectionInfo" style="text-align:center;padding:8px;color:gold"></div>

  <div id="buttons">
    <button id="confirmBtn" style="background:gold;color:#000">OK - Comprar Selección</button>
    <button id="cancelBtn" style="background:#666;color:#fff">Cancelar Selección</button>
  </div>

  <div id="gridWrapper">
    <div id="gridContainer">
      <canvas id="canvas" width="1000" height="1000"></canvas>
      <div id="selectionOverlay"></div>
      <div id="tooltip"></div>
    </div>
  </div>

  <div id="modal" style="display:none; position:fixed; inset:0; background:rgba(0,0,0,0.8); display:flex; align-items:center; justify-content:center; z-index:200;">
    <div id="modalInner">
      <h3 style="color:gold;margin:0 0 8px 0;text-align:center">🎨 Comprar Píxeles</h3>
      <div class="price-display">Precio total: <span id="totalPrice">0.00</span> SOL</div>
      <div id="projectForm">
        <input type="text" id="projectName" placeholder="Nombre del proyecto">
        <input type="text" id="projectURL" placeholder="URL del proyecto">
        <input type="file" id="projectLogo" accept="image/*">
      </div>
      <div id="paymentStatus"></div>
      <div style="display:flex; gap:8px; margin-top:10px;">
        <button id="payBtn" style="background:gold;color:#000;flex:1">💰 Pagar on-chain y registrar</button>
        <button id="closeModal" style="background:#666;color:#fff;flex:1">Cancelar</button>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/@solana/web3.js@1.75.0/lib/index.iife.min.js"></script>
  <script>
  // Cliente JS: selección de bloques, subida al servidor, pago on-chain con Phantom y verificación server-side
  const CANVAS_SIZE = 1000, BLOCK_SIZE = 10, BLOCKS_PER_SIDE = CANVAS_SIZE / BLOCK_SIZE, PRICE_PER_BLOCK = 0.01;
  const MERCHANT_WALLET = document.getElementById('merchantWallet').innerText.trim();

  const canvas = document.getElementById('canvas'); const ctx = canvas.getContext('2d');
  const gridContainer = document.getElementById('gridContainer');
  const soldSpan = document.getElementById('sold');
  const selectionOverlay = document.getElementById('selectionOverlay');
  const selectionInfo = document.getElementById('selectionInfo');
  const tooltip = document.getElementById('tooltip');

  const connectBtn = document.getElementById('connectWallet');
  const walletAddrSpan = document.getElementById('walletAddr');

  let blockData = new Array(BLOCKS_PER_SIDE * BLOCKS_PER_SIDE).fill(null);
  let soldPixels = 0;
  let isDragging = false, startX, startY, endX, endY, selection = null;
  let connection = new solanaWeb3.Connection(solanaWeb3.clusterApiUrl('devnet'));
  let userPublicKey = null;

  // draw grid
  ctx.fillStyle = '#555'; ctx.fillRect(0,0,CANVAS_SIZE,CANVAS_SIZE);
  ctx.strokeStyle = '#333'; ctx.lineWidth = 1;
  for (let x=0;x<=CANVAS_SIZE;x+=BLOCK_SIZE) { ctx.beginPath(); ctx.moveTo(x+0.5,0); ctx.lineTo(x+0.5,CANVAS_SIZE); ctx.stroke(); }
  for (let y=0;y<=CANVAS_SIZE;y+=BLOCK_SIZE) { ctx.beginPath(); ctx.moveTo(0,y+0.5); ctx.lineTo(CANVAS_SIZE,y+0.5); ctx.stroke(); }

  function blockIndex(bx,by){ return by*BLOCKS_PER_SIDE+bx; }
  function isBlockSold(bx,by){ if(bx<0||by<0||bx>=BLOCKS_PER_SIDE||by>=BLOCKS_PER_SIDE) return false; return blockData[blockIndex(bx,by)]!==null; }

  function getMousePosInCanvas(e){
    const rect = canvas.getBoundingClientRect();
    const rawX = Math.floor((e.clientX - rect.left) * (CANVAS_SIZE / rect.width));
    const rawY = Math.floor((e.clientY - rect.top) * (CANVAS_SIZE / rect.height));
    return { rawX, rawY, rect };
  }

  // Wallet connect (Phantom)
  async function connectWallet(){
    if(!window.solana){ alert('Instala Phantom o usa wallet compatible'); return; }
    try{
      const resp = await window.solana.connect();
      userPublicKey = resp.publicKey;
      walletAddrSpan.textContent = userPublicKey.toString();
      connectBtn.textContent = 'Desconectar';
      connectBtn.onclick = disconnectWallet;
    } catch (err) { console.error(err); }
  }
  function disconnectWallet(){ if(window.solana && window.solana.disconnect) window.solana.disconnect(); userPublicKey=null; walletAddrSpan.textContent=''; connectBtn.textContent='Conectar Wallet'; connectBtn.onclick = connectWallet; }
  connectBtn.onclick = connectWallet;

  // selection events
  canvas.addEventListener('mousedown', (e)=>{ const { rawX, rawY } = getMousePosInCanvas(e); startX = Math.floor(rawX/BLOCK_SIZE)*BLOCK_SIZE; startY = Math.floor(rawY/BLOCK_SIZE)*BLOCK_SIZE; isDragging=true; selection=null; selectionInfo.textContent=''; selectionOverlay.style.display='none'; });
  canvas.addEventListener('mousemove', (e)=>{ handleMove(e); handleHover(e); });
  canvas.addEventListener('mouseup', (e)=>{ handleUp(e); });
  canvas.addEventListener('mouseleave', ()=>{ isDragging=false; });

  function handleMove(e){
    if(!isDragging) return;
    const { rawX, rawY, rect } = getMousePosInCanvas(e);
    endX = Math.floor(rawX/BLOCK_SIZE)*BLOCK_SIZE;
    endY = Math.floor(rawY/BLOCK_SIZE)*BLOCK_SIZE;
    const minX = Math.min(startX,endX), maxX = Math.max(startX,endX);
    const minY = Math.min(startY,endY), maxY = Math.max(startY,endY);
    const width = maxX-minX+BLOCK_SIZE, height = maxY-minY+BLOCK_SIZE;
    const blocksX = width/BLOCK_SIZE, blocksY = height/BLOCK_SIZE, blocksTotal = blocksX*blocksY;
    const minBlockX = minX/BLOCK_SIZE, minBlockY = minY/BLOCK_SIZE, maxBlockX = maxX/BLOCK_SIZE, maxBlockY = maxY/BLOCK_SIZE;
    let soldInSelection=0;
    for(let by=minBlockY;by<=maxBlockY;by++) for(let bx=minBlockX;bx<=maxBlockX;bx++) if(isBlockSold(bx,by)) soldInSelection++;
    const freeBlocks = blocksTotal - soldInSelection;
    const totalPrice = (freeBlocks*PRICE_PER_BLOCK).toFixed(2);
    if(soldInSelection>0){ selectionInfo.textContent = `Selección: ${blocksX}x${blocksY} bloques. Ocupados: ${soldInSelection}. Disponibles: ${freeBlocks}. Precio: ${totalPrice} SOL.`; selectionOverlay.style.border='2px solid red'; selectionOverlay.style.boxShadow='0 0 10px red'; }
    else{ selectionInfo.textContent = `Selección: ${blocksX}x${blocksY} bloques. Precio: ${(blocksTotal*PRICE_PER_BLOCK).toFixed(2)} SOL.`; selectionOverlay.style.border='2px solid cyan'; selectionOverlay.style.boxShadow='0 0 10px cyan'; }
    const scale = canvas.getBoundingClientRect().width/CANVAS_SIZE;
    selectionOverlay.style.display='block';
    selectionOverlay.style.left = (minX*scale) + 'px';
    selectionOverlay.style.top = (minY*scale) + 'px';
    selectionOverlay.style.width = (width*scale) + 'px';
    selectionOverlay.style.height = (height*scale) + 'px';
  }

  function handleUp(e){
    if(!isDragging) return;
    isDragging=false;
    if(endX===undefined||endY===undefined){ selection=null; return; }
    const minX = Math.min(startX,endX), maxX = Math.max(startX,endX);
    const minY = Math.min(startY,endY), maxY = Math.max(startY,endY);
    const minBlockX = minX/BLOCK_SIZE, minBlockY = minY/BLOCK_SIZE, maxBlockX = maxX/BLOCK_SIZE, maxBlockY = maxY/BLOCK_SIZE;
    let soldInSelection=0;
    for(let by=minBlockY;by<=maxBlockY;by++) for(let bx=minBlockX;bx<=maxBlockX;bx++) if(isBlockSold(bx,by)) soldInSelection++;
    selection = { minBlockX, minBlockY, maxBlockX, maxBlockY, blocksX: maxBlockX-minBlockX+1, blocksY: maxBlockY-minBlockY+1, soldInSelection };
  }

  // hover tooltip
  function handleHover(e){
    if(isDragging){ tooltip.style.display='none'; return; }
    const { rawX, rawY, rect } = getMousePosInCanvas(e);
    const bx = Math.floor(rawX/BLOCK_SIZE), by = Math.floor(rawY/BLOCK_SIZE);
    if(bx<0||by<0||bx>=BLOCKS_PER_SIDE||by>=BLOCKS_PER_SIDE){ tooltip.style.display='none'; return; }
    const data = blockData[blockIndex(bx,by)];
    if(data){ tooltip.textContent = data.name; const scale=rect.width/CANVAS_SIZE; tooltip.style.left = (bx*BLOCK_SIZE*scale + 6) + 'px'; tooltip.style.top = (by*BLOCK_SIZE*scale - 6) + 'px'; tooltip.style.display='block'; } 
    else tooltip.style.display='none';
  }

  // Buttons
  document.getElementById('confirmBtn').addEventListener('click', ()=> {
    if(!selection){ alert('Selecciona un área primero'); return; }
    if(selection.soldInSelection>0){ alert(`La selección contiene ${selection.soldInSelection} bloques ocupados.`); return; }
    const blocksTotal = selection.blocksX * selection.blocksY;
    const totalPrice = (blocksTotal*PRICE_PER_BLOCK).toFixed(2);
    document.getElementById('totalPrice').textContent = totalPrice;
    document.getElementById('modal').style.display = 'flex';
  });
  document.getElementById('cancelBtn').addEventListener('click', ()=> { selection=null; selectionOverlay.style.display='none'; selectionInfo.textContent=''; });
  document.getElementById('closeModal').addEventListener('click', ()=> { document.getElementById('modal').style.display='none'; document.getElementById('paymentStatus').textContent = ''; });

  // Upload to server
  async function uploadLogoToServer(file){
    const fd = new FormData(); fd.append('file', file, file.name);
    const res = await fetch('/api/upload-logo', { method:'POST', body: fd });
    const data = await res.json();
    if(!res.ok || !data.ok) throw new Error(data.error || 'Error subiendo logo al servidor');
    return data;
  }

  // Pay: create tx (transfer + memo), sign & send, then call server /api/verify-purchase
  document.getElementById('payBtn').addEventListener('click', async () => {
    const name = document.getElementById('projectName').value.trim();
    const url = document.getElementById('projectURL').value.trim();
    const logoFile = document.getElementById('projectLogo').files[0];
    if(!selection){ alert('No hay selección'); return; }
    if(selection.soldInSelection>0){ alert('Selección contiene bloques ocupados'); return; }
    if(!name || !url || !logoFile){ alert('Completa todos los campos'); return; }
    if(!window.solana || !window.solana.isPhantom){ alert('Phantom no detectado'); return; }
    if(!userPublicKey){ alert('Conecta tu wallet'); return; }

    try {
      document.getElementById('paymentStatus').textContent = 'Subiendo logo al servidor...';
      const uploadRes = await uploadLogoToServer(logoFile);
      const logoUrl = uploadRes.url;

      const metadata = {
        name,
        url,
        logo: logoUrl,
        logo_cid: uploadRes.cid,
        selection: {
          minBlockX: selection.minBlockX,
          minBlockY: selection.minBlockY,
          blocksX: selection.blocksX,
          blocksY: selection.blocksY
        },
        priceSOL: parseFloat((selection.blocksX * selection.blocksY * PRICE_PER_BLOCK).toFixed(9))
      };

      // transfer + memo
      const fromPubkey = userPublicKey;
      const toPubkey = new solanaWeb3.PublicKey(MERCHANT_WALLET);
      const lamports = Math.round(metadata.priceSOL * solanaWeb3.LAMPORTS_PER_SOL);
      const transferIx = solanaWeb3.SystemProgram.transfer({ fromPubkey, toPubkey, lamports });
      const MEMO_PROGRAM_ID = new solanaWeb3.PublicKey('MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr');
      const memoData = new TextEncoder().encode(JSON.stringify(metadata));
      const memoIx = new solanaWeb3.TransactionInstruction({ keys: [], programId: MEMO_PROGRAM_ID, data: memoData });

      const tx = new solanaWeb3.Transaction().add(transferIx, memoIx);
      tx.feePayer = fromPubkey;
      tx.recentBlockhash = (await connection.getRecentBlockhash()).blockhash;

      document.getElementById('paymentStatus').textContent = 'Firmando transacción...';
      let signature;
      if(window.solana.signAndSendTransaction){
        const signed = await window.solana.signAndSendTransaction(tx);
        signature = signed.signature;
      } else {
        const signedTx = await window.solana.signTransaction(tx);
        const raw = signedTx.serialize();
        signature = await connection.sendRawTransaction(raw);
      }

      document.getElementById('paymentStatus').textContent = 'Transacción enviada. Esperando confirmación...';
      await connection.confirmTransaction(signature, 'confirmed');

      document.getElementById('paymentStatus').textContent = 'Verificando en servidor...';
      const verifyRes = await fetch('/api/verify-purchase', {
        method: 'POST',
        headers: { 'Content-Type':'application/json' },
        body: JSON.stringify({ signature, expectedAmountSOL: metadata.priceSOL, metadata })
      });
      const verifyJson = await verifyRes.json();
      if(verifyJson.ok){
        document.getElementById('paymentStatus').textContent = '✅ Pago confirmado y registrado.';
        finalizeOnChainPurchase(metadata);
      } else {
        document.getElementById('paymentStatus').textContent = '❌ Verificación falló: ' + (verifyJson.error || JSON.stringify(verifyJson));
      }

    } catch (err) {
      console.error(err);
      alert('Error en el pago: ' + (err.message || err));
    }
  });

  // finalize: draw image & mark blocks sold locally
  function finalizeOnChainPurchase(metadata){
    const img = new Image(); img.crossOrigin = 'anonymous';
    img.onload = function(){
      const drawX = selection.minBlockX * BLOCK_SIZE;
      const drawY = selection.minBlockY * BLOCK_SIZE;
      const drawWidth = selection.blocksX * BLOCK_SIZE;
      const drawHeight = selection.blocksY * BLOCK_SIZE;
      ctx.drawImage(img, drawX, drawY, drawWidth, drawHeight);

      let newlySoldBlocks = 0;
      for(let by = selection.minBlockY; by <= selection.maxBlockY; by++){
        for(let bx = selection.minBlockX; bx <= selection.maxBlockX; bx++){
          const idx = blockIndex(bx,by);
          if(blockData[idx] === null){ blockData[idx] = { name: metadata.name, url: metadata.url, logo: metadata.logo, logo_cid: metadata.logo_cid }; newlySoldBlocks++; }
        }
      }
      soldPixels += newlySoldBlocks * BLOCK_SIZE * BLOCK_SIZE;
      soldSpan.innerText = soldPixels.toLocaleString();
      drawSoldOverlays();

      setTimeout(()=>{ document.getElementById('modal').style.display='none'; document.getElementById('projectName').value=''; document.getElementById('projectURL').value=''; document.getElementById('projectLogo').value=''; document.getElementById('paymentStatus').textContent=''; selection=null; selectionOverlay.style.display='none'; selectionInfo.textContent=''; },800);
    };
    img.onerror = function(){ console.warn('No se pudo cargar imagen desde IPFS'); };
    img.src = metadata.logo;
  }

  // overlays
  function drawSoldOverlays(){
    const prev = gridContainer.querySelectorAll('.sold-overlay'); prev.forEach(p=>p.remove());
    const rect = canvas.getBoundingClientRect(); const scale = rect.width / CANVAS_SIZE;
    for(let by=0; by<BLOCKS_PER_SIDE; by++){
      for(let bx=0; bx<BLOCKS_PER_SIDE; bx++){
        if(isBlockSold(bx,by)){
          const div = document.createElement('div'); div.className = 'sold-overlay';
          div.style.left = (bx * BLOCK_SIZE * scale) + 'px';
          div.style.top = (by * BLOCK_SIZE * scale) + 'px';
          div.style.width = (BLOCK_SIZE * scale) + 'px';
          div.style.height = (BLOCK_SIZE * scale) + 'px';
          gridContainer.appendChild(div);
        }
      }
    }
  }

  // click open url
  canvas.addEventListener('click', (e)=>{
    if(isDragging) return;
    const { rawX, rawY } = getMousePosInCanvas(e);
    const bx = Math.floor(rawX/BLOCK_SIZE), by = Math.floor(rawY/BLOCK_SIZE);
    const data = blockData[blockIndex(bx,by)];
    if(data && confirm(`🚀 Visitar ${data.name}?`)) window.open(data.url, '_blank');
  });

  // resize overlays
  window.addEventListener('resize', drawSoldOverlays);

  </script>
</body>
</html>